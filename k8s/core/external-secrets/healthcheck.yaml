apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-secrets-healthcheck
  namespace: external-secrets
spec:
  replicas: 1
  selector:
    matchLabels:
      app: external-secrets-healthcheck
  template:
    metadata:
      labels:
        app: external-secrets-healthcheck
    spec:
      serviceAccountName: external-secrets-healthcheck
      containers:
      - name: healthcheck
        image: curlimages/curl:latest
        ports:
        - containerPort: 8080
        command: ["/bin/sh"]
        args:
        - -c
        - |
          # Install kubectl
          apk add --no-cache jq
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          mv kubectl /usr/local/bin/

          # Function to check health
          check_health() {
            # Check ClusterSecretStore status
            css_status=$(kubectl get clustersecretstore onepassword-vault -o jsonpath='{.status.conditions[0].status}' 2>/dev/null || echo "Unknown")

            # Check ExternalSecrets
            failed_secrets=$(kubectl get externalsecrets -A --no-headers 2>/dev/null | grep -v "SecretSynced.*True" | wc -l)

            # Check recent errors (last 2 minutes for more responsive monitoring)
            recent_errors=$(kubectl logs -n external-secrets -l app.kubernetes.io/name=external-secrets --since=2m 2>/dev/null | grep -c "invalid.*format\|rate.limit\|unable.to.validate" || echo "0")

            # Determine health status
            if [ "$css_status" = "True" ] && [ "$failed_secrets" -eq 0 ] && [ "$recent_errors" -lt 3 ]; then
              echo "OK - All ExternalSecrets healthy"
            else
              echo "FAIL - Issues detected: CSS=${css_status}, FailedSecrets=${failed_secrets}, RecentErrors=${recent_errors}"
            fi
          }

          # Simple HTTP server
          while true; do
            {
              echo "HTTP/1.1 200 OK"
              echo "Content-Type: text/plain"
              echo ""
              check_health
            } | nc -l -p 8080
          done
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "64Mi"
            cpu: "50m"
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: external-secrets-healthcheck
  namespace: external-secrets
spec:
  selector:
    app: external-secrets-healthcheck
  ports:
  - port: 8080
    targetPort: 8080
    name: http
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-healthcheck
  namespace: external-secrets
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: external-secrets-healthcheck
rules:
- apiGroups: ["external-secrets.io"]
  resources: ["externalsecrets", "clustersecretstores"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: external-secrets-healthcheck
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-secrets-healthcheck
subjects:
- kind: ServiceAccount
  name: external-secrets-healthcheck
  namespace: external-secrets
